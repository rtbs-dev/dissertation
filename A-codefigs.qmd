---
title: Source for figures
execute:
  cache: true
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.7
  kernelspec:
    display_name: Python (Pixi)
    language: python
    name: pixi-kernel-python3
---

```{python}
# IMPORTS
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import networkx as nx
# import netgraph as ng
from network2tikz import plot
from jupyter_tikz import TexFragment, TexDocument

matplotlib.rcParams['font.family']=['serif']
matplotlib.rcParams['font.serif']=['Bitstream Charter']

%config InlineBackend.figure_formats = ['svg']
# %load_ext jupyter_tikz
# fm = matplotlib.font_manager
# sorted(fm.get_font_names())
```

```{python}
# preamble = r"""
# \usepackage{tikz}
# \usepackage{tikz-network}
# """

import os
tex = os.getenv('QUARTO_PDFLATEX')
```

```{python}
# DEFAULT STYLES
my_orange="#e7c38a"
my_green ="#8dcba0"
my_red   ="#fc628e"
my_blue  ="#abd7e6"
nxdraw_kws = {
    #"node_size": 500, 
    # "node_color": "xkcd:slate",
    # "edge_color": "0.4",
    # "edgecolors": "white",
    "edgecolors": "0.4",
    # "font_color": "white",
    "font_color": "0.3",
    "font_family":"Bitstream Charter",
    "font_weight":'bold',
    "font_size": 8,
    "linewidths": 1,
    "width": 2,
}

grphvz_kws = "-Goverlap=false"

def node_attr_arr(G, attr):
    return [G.nodes[node][attr] for node in list(G.nodes())]
def edge_attr_arr(G, attr):
    return [G.edges[edge][attr] for edge in list(G.edges())]

def node_attr_map(G, attr):
    return {node:G.nodes[node][attr] for node in list(G.nodes())}

def run_tikz(G): 
    return TexFragment(
        nx.to_latex_raw(kcg),
        tex_packages="tikz-network",
        scale=2,
    ).run_latex(tex_program=tex)
```

```{python}
#| editable: true
#| slideshow: {slide_type: ''}
kcg = nx.karate_club_graph()
kcg_layout = nx.spring_layout(kcg,k=1.1, seed=2, iterations=200)
kcg_cmap={
    'Mr. Hi':np.array(matplotlib.colors.to_rgb(my_orange)),
    'Officer':np.array(matplotlib.colors.to_rgb(my_blue)),
}
kcg.add_nodes_from([(
    i,{
        "label": n+1,
        'pos': 5*kcg_layout[i],
        # 'node_options':{} 
    }
) for n,i in enumerate(kcg.nodes())])
kcg.add_edges_from(kcg.edges.keys(), color='gray')
kcg.add_edge(33,22,color='red')
# kcg.add_nodes_from([(
# kcg_layout = nx.nx_agraph.pygraphviz_layout(kcg, args=grphvz_kws)
#kcg_layout = nx.kamada_kawai_layout(kcg)
#kcg_layout = nx.arf_layout(kcg,pos=kcg_layout,a=1.8, seed=2, scaling=2)
# plt.figure(figsize=(6,4))
nx.draw_networkx(
    kcg,
    node_color=[kcg_cmap[i] for i in node_attr_arr(kcg,'club')],
    pos=kcg_layout,
    labels=dict(zip(range(34), range(1,35))),
    edge_color=edge_attr_arr(kcg, 'color'),
    **nxdraw_kws
)
# nx.draw_networkx_edges(kcg, kcg_layout, edgelist={(33,22)}, edge_color='red')
ax = plt.gca()
ax.margins(0.05)
plt.axis('off')
plt.show()
```

```{python}
!echo $QUARTO_PDFLATEX
```

```{python}
# TexFragment(nx.to_latex_raw(kcg)).run_latex(tex_program='$QUARTO_PDFLATEX')
# run_tikz(kcg)
plot(
    kcg, 'codefigs/kcg.tex',  
    layout=kcg_layout,
    # layout='FR',
    node_label=dict(zip(range(34), range(1,35))),
    canvas=(8,8),
    standalone=False,
    node_size=0.4,
    # seed=23,
    node_color=[tuple(np.round(kcg_cmap[c]*256,0).tolist()) for c in node_attr_arr(kcg,'club')],
    edge_color=edge_attr_arr(kcg, 'color'),

)
```

```{python}
#| label: fig-karate-club
#| fig-cap: Zachary's Karate Club, with ambiguously extant edge 78 highlighted.

with open('codefigs/kcg.tex') as f: 
    # print()
    # print(f.read())
    fig =TexFragment(
        f.read(),
        preamble=r"""
        \usepackage[otfmath]{XCharter}
        \usepackage{tikz-network}
        """,
        # tex_packages="tikz-network",
        # implicit_tikzpicture=True, # If true wraps the template within a tikzpicture
        scale=2,
    ).run_latex(tex_program='$QUARTO_PDFLATEX')
fig
```

```{python}
#| label: fig-bipartite
#| editable: true
#| slideshow: {slide_type: ''}
# Bipartite representation of node "activation" data
B = nx.Graph()

x1s = 'CEGH'
x2s = 'AEFH'
x3s = 'BFIJ'
# Add nodes with the node attribute "bipartite"

B.add_nodes_from([
    ('$x_1$',{'color':my_orange, 'pos':(-1,0), 'bipartite':0}), 
    ('$x_2$',{'color':my_green, 'pos':(0,0), 'bipartite':0}),
    ('$x_3$',{'color':my_red, 'pos':(1,0), 'bipartite':0})
], bipartite=0)

B.add_nodes_from([(a, {'bipartite':1, 'color':my_blue,'pos':(0.5*(i-4.5),1)}) for i,a in enumerate('ABCDEFGHIJ')])

# Add edges only between nodes of opposite node sets

B.add_edges_from(
    [('$x_1$',n) for n in x1s] +\
    [('$x_2$',n) for n in x2s] +\
    [('$x_3$',n) for n in x3s]
)

# bp_pos = nx.layout.bipartite_layout(B, ['x1', 'x2', 'x3'], aspect_ratio=0.1)
plt.figure(figsize=(4,3))
nx.draw_networkx(
    B, pos=node_attr_map(B,'pos'),
    node_color = node_attr_arr(B,'color'),
    **nxdraw_kws
)
ax = plt.gca()
ax.set_aspect('equal')
ax.margins(x=0,y=0.2)
# ax.set_clip_on('off')
plt.axis('off');


# plt.tight_layout()
```

```{python}
nx.bipartite.biadjacency_matrix(B, ['$x_1$', '$x_2$', '$x_3$']).todense()
```

$$
X(\{1,2,3\})=
\begin{pmatrix}
1 & 0 & 1 & 0 & 1 & 0 & 0 & 1 & 0 & 0 \\
0&0&1&0&1&1&1&0&0&0 \\
0&1&0&1&0&1&0&0&1&0 
\end{pmatrix}
$$

```{python}
#| label: fig-tikz-test
#| editable: true
#| slideshow: {slide_type: ''}
from jupyter_tikz import TexFragment, TexDocument

# The code
tex_template_code = r"""
\begin{tikzpicture}
\Vertex[x=0.5,label=$x_1$]{x1}
\Vertex[x=2.5,label=$x_2$]{x2}
\Vertex[y=1,IdAsLabel]{03}
\Vertex[y=1,x=-1,IdAsLabel]{07}
\Vertex[y=1,IdAsLabel]{08}
\Vertex[y=1,x=1,IdAsLabel]{05}
\Vertex[y=1,x=2,IdAsLabel]{06}
\Vertex[y=1,x=3,IdAsLabel]{01}

\Edge(x1)(03)
\Edge(x1)(07)
\Edge(x1)(05)
\Edge(x1)(08)
\Edge(x2)(08)
\Edge(x2)(05)
\Edge(x2)(01)
\Edge(x2)(06)
\end{tikzpicture}
"""

# The tikz object
tikz_picture = TexFragment(
    tex_template_code,
    tex_packages="tikz-network",
    # implicit_tikzpicture=True, # If true wraps the template within a tikzpicture
    scale=1.8,
    # tex_packages="pgfplots",
    # no_tikz=True,
)

# Run LaTeX
tikz_picture.run_latex(tex_program='$QUARTO_PDFLATEX')
```

